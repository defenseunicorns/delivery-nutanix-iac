# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

#cloud-config
hostname: ${hostname}.local
prefer_fqdn_over_hostname: false
ssh_pwauth: True
users:
  - name: era
    passwd: "${user_password}"
    shell: /bin/bash
    lock_passwd: false
    ssh_pwauth: True
    chpasswd: { expire: False }
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh_authorized_keys:
    %{ for key in authorized_keys ~}
    - ${key}
    %{ endfor ~}

runcmd:
  - |
    sudo pvcreate /dev/sdb
    sudo pvs
    sudo vgcreate pg_data_vg /dev/sdb
    sudo vgs
    sudo lvcreate -L 49.99G -n pg_data_lv pg_data_vg
    sudo lvscan
    sudo mkfs.ext4 /dev/pg_data_vg/pg_data_lv
    sudo mkdir -p /var/lib/pgsql/
    # Mount postgres default data location to second drive. This is required by NDB
    sudo mount /dev/pg_data_vg/pg_data_lv /var/lib/pgsql/
    echo '/dev/pg_data_vg/pg_data_lv  /pgsql/postgres/data  ext4  defaults 0 0' | sudo  tee -a /etc/fstab
    sudo mkdir -p /var/lib/pgsql/data/
    # Ensure postgres user owns data dir
    sudo chown -R postgres:postgres /var/lib/pgsql/
    # Init and start PG service
    su postgres -c "/usr/local/pgsql/bin/initdb -D /var/lib/pgsql/data"
    sudo systemctl enable era_postgres
    # Update pg_hba.conf to match what NDB uses
    sed -E -i 's/local(\s+)all(\s+)all(\s+)peer/local\1all\2all\3trust/' /var/lib/pgsql/data/pg_hba.conf
    sed -E -i 's/local(\s+)replication(\s+)all(\s+)peer/local\1replication\2all\3scram-sha-256/' /var/lib/pgsql/data/pg_hba.conf
    echo "host all all 0.0.0.0/0 scram-sha-256" | tee -a /var/lib/pgsql/data/pg_hba.conf
    echo "listen_addresses = '*'" | tee -a /var/lib/pgsql/data/postgresql.conf
    sudo systemctl start era_postgres
    /usr/local/pgsql/bin/psql -U postgres -c "ALTER USER postgres PASSWORD '${pg_password}'"
    sudo firewall-offline-cmd --zone=public --add-service=postgresql
    sudo firewall-offline-cmd --zone=public --add-port=2379/tcp
    sudo firewall-offline-cmd --zone=public --add-port=2380/tcp
    sudo firewall-offline-cmd --zone=public --add-protocol=vrrp
    sudo firewall-offline-cmd --zone=public --add-rich-rule='rule family="ipv4" source address="224.0.0.18" accept'
    sudo firewall-offline-cmd --zone=public --permanent --add-service=postgresql
    sudo firewall-offline-cmd --zone=public --permanent --add-port=2379/tcp
    sudo firewall-offline-cmd --zone=public --permanent --add-port=2380/tcp
    sudo firewall-offline-cmd --zone=public --permanent --add-protocol=vrrp
    sudo firewall-offline-cmd --zone=public --permanent --add-rich-rule='rule family="ipv4" source address="224.0.0.18" accept'
    sudo systemctl restart firewalld
    # If an NTP server address is passed in then overwrite chrony.conf with settings needed for using custom NTP server
    if [ "${ntp_server}" ]; then
      # copy default chrony.conf into a new file as a reference
      cp /etc/chrony.conf /etc/chrony.defaultconf
      # Grab server IP and use it to find the subnet that the server is on
      host_ip=$(ip route get $(ip route show 0.0.0.0/0 | grep -oP 'via \K\S+') | grep -oP 'src \K\S+')
      subnet=$(ip route | grep -v default | grep "src $${host_ip}" | awk '{print $1}')
      # Overwrite default chrony.conf with custom NTP server information
      tee /etc/chrony.conf <<EOF >/dev/null
    # Server/IP to use for NTP
    server ${ntp_server} iburst
    # Record the rate at which the system clock gains/losses time.
    driftfile /var/lib/chrony/drift
    # Specify directory for log files.
    logdir /var/log/chrony
    log measurements statistics tracking
    # Allow the system clock to be stepped in the first three updates
    # if its offset is larger than 1 second.
    makestep 1.0 3
    # Specify file containing keys for NTP authentication.
    keyfile /etc/chrony.keys
    commandkey 24
    # Serve time even if not synchronized to a time source.
    local stratum 10
    initstepslew 20 ntp1.example.net
    # Enable kernel synchronization of the real-time clock (RTC).
    rtcsync
    # Allow NTP client access from local network.
    allow $${subnet}
    # Get TAI-UTC offset and leap seconds from the system tz database.
    leapsectz right/UTC
    EOF
    # Restart chronyd service to ensure config change is active
    systemctl restart chronyd
    fi
